The purpose of the first three programs (MotzkinTriangle.java, ColorCalculator.java, and lAryPathSequenceGenerator.java) was to assist 
research in combinatorics. I participated in a reasearch group where we studied Generalized Moztkin Paths. Using specific values for 
height, coloring, and order, we would generate sequences that we would then relate to other combinitorial objects. These programs were 
built to be used by our research team simply to speed up our calculations.

The first program, MotzkinTriangle.java, allows the user to input an order (m) and values for coloring (represented by X and Y
vectors). Then, the program calculates a Motzkin Triangle, a infinite lower 2D array where the (n,k) entry is the number of possible
Motkzin paths of length n and height k. Next, the user is given a menu of options. The user can print the triangle or print sequences
that are formed by different operations on the triangle.

The second program, ColorCalculator.java, allows the user to input the first 8 terms of a sequence. Next, it prompts the user for
an order. Then, the program loops through different values for colors until a Motzkin Triangle is gerneated where the first column
matches the inputted sequence. This program was not built to be efficient. It's practical purpose was simply to asist us in establishing
a numeric pattern in the colors. Therefore, the program takes hours to caluculate color values for orders higher than 3. Any order less
than or equal to 3, the program calculates within a minute.

The third program, lAryPathSequenceGenerator, deals with a new combinitorial object called l-ary paths. Sequences can be grafted from
l-ary paths by counting the number of possible l-ary paths for a length n. Our research group generalized l-ary paths to account for
limitations such as order, height, depth, and peaks. When the program is run, it prompts the user to enter values for l (order), a (depth),
and r (peaks). Then, the program calculates a sequence that represents the number of l-ary paths of length n.



The last program (BankSimulation.java) uses a seperate class file (Customer1.java) to simulate a bank during its peak hours. This bank has 
two types of customers, business and regular. There are also two types of bank tellers, business and regular. Regular customer can only be
served at regular tellers, while business customers can be served at either teller. The user is prompted to enter the number of tellers, 
and then the simulation prints out data regarding how many customers were served and times the tellers finished serving. Additional
information is printed to a seperate file. The simulation represents each passing second as a minute in the simulation. Hence, since each
peak time is 1.5 hours, the simulation takes 3 minutes to complete both peak times. The user is then given the option to run the simulation
again with a different number of tellers. Should the line for the customers be so long that customers that came into the bank during the first
peak time are still in line when the second peak time starts, the simulation for the first peak time halts, notifies the user, and starts the
second peak time with no customers currently in the bank. The seperate class file records information about the customers, such as customer 
type and how long they have been waiting.
